PROMPT 2: Interactive 3D Strohhalm mit Three.js
Erstelle eine interaktive 3D-Strohhalm-Visualisierung, die auf Mausbewegungen reagiert und die Produktqualität demonstriert.
Implementation:
1. Three.js Setup
bashnpm install three @react-three/fiber @react-three/drei
2. 3D Strohhalm Component
tsx// client/src/components/straw-3d.tsx
import { Canvas, useFrame } from '@react-three/fiber';
import { Float, MeshDistortMaterial } from '@react-three/drei';
import { useRef, useState } from 'react';
import * as THREE from 'three';

function Straw({ mouse }: { mouse: { x: number, y: number } }) {
  const meshRef = useRef<THREE.Mesh>(null);
  const [hovered, setHovered] = useState(false);
  
  useFrame((state) => {
    if (meshRef.current) {
      // Rotation basierend auf Mausposition
      meshRef.current.rotation.x = mouse.y * 0.5;
      meshRef.current.rotation.y = mouse.x * 0.5;
      
      // Pulsierender Effekt bei Hover
      if (hovered) {
        meshRef.current.scale.x = 1 + Math.sin(state.clock.elapsedTime * 5) * 0.05;
      }
    }
  });
  
  return (
    <Float speed={2} rotationIntensity={0.5} floatIntensity={0.5}>
      <mesh
        ref={meshRef}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
      >
        <cylinderGeometry args={[0.1, 0.1, 5, 32]} />
        <MeshDistortMaterial
          color="#00BFA6"
          attach="material"
          distort={0.2}
          speed={2}
          roughness={0.2}
          metalness={0.8}
        />
      </mesh>
    </Float>
  );
}

export function Straw3D() {
  const [mouse, setMouse] = useState({ x: 0, y: 0 });
  
  return (
    <div 
      className="w-full h-[400px] cursor-grab active:cursor-grabbing"
      onMouseMove={(e) => {
        const rect = e.currentTarget.getBoundingClientRect();
        setMouse({
          x: ((e.clientX - rect.left) / rect.width) * 2 - 1,
          y: -((e.clientY - rect.top) / rect.height) * 2 + 1
        });
      }}
    >
      <Canvas camera={{ position: [0, 0, 8], fov: 45 }}>
        <ambientLight intensity={0.5} />
        <pointLight position={[10, 10, 10]} />
        <Straw mouse={mouse} />
      </Canvas>
    </div>
  );
}
3. Fallback für Mobile/Low-End
tsx// Erkennung und Fallback
const [canUse3D, setCanUse3D] = useState(true);

useEffect(() => {
  // Check WebGL support und Performance
  const canvas = document.createElement('canvas');
  const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
  
  setCanUse3D(!!gl && !isMobile);
}, []);

return canUse3D ? <Straw3D /> : <AnimatedSVGStraw />;